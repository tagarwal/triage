###
### RULE file for baselog comparison
###

#  Comments consist of empty lines or lines whose
#  first non-space character is '#'
#

# Syntax:   DEFINE  variable  "literal"

# - Literals must be quotyed with beginning and ending '"'
# - Literals permit the following quotes: \" == '"'  and  \\ == '\'
# - Literals permit replacements:  "....^variable^...."


DEFINE HEX       "[A-Fa-f0-9]"
DEFINE HEX2      "^HEX^^HEX^"    # Note: definitions are applied in-order
                                 #       if this line is moved before the HEX definition,
                                 #       then the replacement will fail!

# PATTERN_LITERAL defines literals for patterns

DEFINE_QUOTE SQB_OPEN   "["
DEFINE_QUOTE SQB_CLOSE  "]"
DEFINE_QUOTE CB_OPEN    "{"
DEFINE_QUOTE CB_CLOSE   "}"
DEFINE_QUOTE BSLASH     "\\"
DEFINE_QUOTE HOSTNAME   "${HOST_NAME}"
DEFINE_QUOTE TIMESTAMP  "${TIMESTAMP}"
DEFINE_QUOTE USERNAME   "${USER_NAME}"
DEFINE_QUOTE FARMJOBID  "${FARM_JOBID}"
DEFINE_QUOTE TRANSACTIONNAME "${TRANSACTION_NAME}"
DEFINE_QUOTE SESSIONID  "${SESSIONID}"
DEFINE_QUOTE SELENIUMID "${SELENIUMID}"


# The following defines a list of _literals_ 
#  - list one literal per line
#  - log lines containing on of these literals will be IGNORED

BEGIN_IGNORE_LITERALS

# Ant messages
       " [mkdir] Created "
        " [copy] Copying "
        " [copy] Copied "
     " [replace] Replacing "
      " [delete] Deleting"
       " [unzip] Expanding"
       " [unjar] Expanding"
       " [unjar] expanding"
         " [jar] Building "
        " [move] Moving "
         " [tar] Entry"
       " [touch] Creating "
    " [loadfile] loaded "

# Test Framework messages
  "[orajtstinit] Copied "
  "[tl-kill] parallel"

# Farm messages
   # NTPD-related
   ": adjust time server "
   " ntpd -x -u ntp:ntp -p /var/run/ntpd.pid"
   "Shutting down ntpd: "
   "ntpd: Synchronizing with time server: "
   "Starting ntpd: "
   "ntpd (pid "

   # ps-command related
   " [psinfo] "
   " [pskill] "

   # Faem executables
   " /usr/bin/gcc"
   " /usr/share/zoneinfo/"

   # df-command related
   "/dev/xvda1           "

   # other
   "rm: cannot chdir from `.' to "
   " [exec] An email is sent to "
   "ade WARNING: Forcing new view storage "

# from the J2EE build & test
   " [java] Integrating jar -->("
   " [java] Integrating jar <--("
   " ADMA5001I: The application binaries are saved in " 
   " [echo] BUILDSUM:  "  # A bad idea!
   " [sql] Executing resource: "


# from the ENTSEC build & test
   " [junit] FINE: "
   " [junit] FINER: "
   " [junit] INFO: "

# from the ASKERNEL test
   " [junit] <font color=\""   # an adminserver test. This nondeterministic behavior makes one crazy.


END_IGNORE_LITERALS



# The following section defines the mapping of Java Patterns to literals.

#
# Syntax:
#      "<literal>" ::= "<pattern>" ;
# Multiple patterns are also permitted:
#      "<literal>" ::= "<pattern1>" | "<pattern2>" ...   ;
# which could have been written instead as:
#      "<literal>" ::= "<pattern1>" ;
#      "<literal>" ::= "<pattern2>" ;
#      ...
# 
# This will reduce a line that matches <pattern> to a line where occurrences
# of this pattern are replaced by <literal>.
#
# The pattern syntax follows the syntax for Java patterns.
# Note that the defined matching rules will be applied in order.
#    

BEGIN_MAP_PATTERNS

# Directories for MATS TESTING

    # /scratch/${USER_NAME}/work/mw1306/soa3009
    "${SOA_HOME_DIR}" ::= "/scratch/^USERNAME^/work/mw[0-9]+/soa[0-9]+" ;

    # /scratch/aime1/work/mw1021/wc7196
    "${WC_HOME_DIR}" ::= "/scratch/^USERNAME^/work/mw[0-9]+/wc[0-9]+" ;

    # /scratch/aime1/work/mw6475
    "${MW_HOME_DIR}" ::= "/scratch/^USERNAME^/work/mw[0-9]+";



# TIME AND DATE - RELATED FILTERING

    " ${TIMESTAMP}" ::= 
        # Thu Apr 22 11:02:46 2010     and    Thu May  6 11:15:34 2010
        " [A-Z][a-z][a-z] [A-Z][a-z][a-z] +[0-9]+ [0-9]+:[0-9]+:[0-9]+ [0-9][0-9][0-9][0-9]"

        # Fri, 23 Apr 2010 13:38:13 GMT
     |  " [A-Z][a-z][a-z], [0-9][0-9]* [A-Z][a-z][a-z] [0-9][0-9][0-9][0-9] [0-9][0-9]*:[0-9][0-9]*:[0-9][0-9]* "
     ;

    "${TIMESTAMP}" ::= 

        # Thu Apr 22 11:02:46 UTC 2010
        "[A-Z][a-z][a-z] [A-Z][a-z][a-z] [0-9][0-9]? [0-9][0-9]?:[0-9][0-9]?:[0-9][0-9]? [A-Z][A-Z][A-Z] [0-9][0-9][0-9][0-9]"
     
        # 04/01/2010 09:08:07 PST or 04/01/2010 09:08:07.123 
     |  "[0-9][0-9]/[0-9][0-9]/[0-9][0-9][0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9][.0-9]* ?[A-Z]?[A-Z]?[A-Z]?"

        # Apr 1, 2010 9:09:07 AM
     |  "[A-Z][a-z][a-z] [0-9][0-9]*, [0-9][0-9][0-9][0-9] [0-9][0-9]*:[0-9][0-9]:[0-9][0-9] [AP]M"

        #  2010-04-01 09:08:07,654  or/and 2010-04-21T08:49:24Z   or  2010-04-27 20:37:59.381
     |  "[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][ T][0-9][0-9]:[0-9][0-9]:[0-9][0-9][0-9,.Z]*"

        # 2010-4-1@9-8-7
     |  "[0-9][0-9][0-9][0-9]-[0-9][0-9]*-[0-9][0-9]*@[0-9][0-9]*-[0-9][0-9]*-[0-9][0-9]*"

        # 04-01-2010 09:08:07  and  4-21-2010 9:17:51                     
     |  "[0-9][0-9]?-[0-9][0-9]?-[0-9][0-9][0-9][0-9] [0-9][0-9]?:[0-9][0-9]?:[0-9][0-9]?"

        # 04-27-2010-02-28-12-PM
     |  "[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]-[0-9][0-9]-[AP]M"

        # 1-Apr-10 9:08:07   or    23-APR-2010 18:20:16    or   23 Apr 2010 15:26:52   or    27 avr. 2010 17:56:01
     |  "[0-9][0-9]?[- ][A-Za-z][A-Za-z][A-Za-z][.]?[- ][0-9][0-9][0-9]* [0-9][0-9]?:[0-9][0-9]?:[0-9][0-9]?"

        # 11:43:01.540
     |  "[0-9][0-9]:[0-9][0-9]:[0-9][0-9][.][0-9][0-9][0-9]"

        # 9:08:07 PM
     |  "[0-9][0-9]*:[0-9][0-9]:[0-9][0-9] [AP]M"

        # TSTAMP=1234     DSTAMP=20100427
     |  "[DT]STAMP=[0-9]+"

        # TODAY=April 27 2010
     |  "TODAY=[A-Z][a-z]+ [0-9]+ [0-9][0-9][0-9][0-9]"

        # '100511-1742'   or  /results-100511-1742/
     |  "[-'][0-9][0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]['/.]"

        # Start Time = 100511-1742
     |  "Start Time = [0-9][0-9][0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]"

        # .../UpgradeBPELProcess2010-05-12-13-53-27PM.log"
     |  "[0-9][0-9][0-9][0-9]-[0-9][0-9]?-[0-9][0-9]?-[0-9][0-9]?-[0-9][0-9]?-[0-9][0-9]?[AaPp][Mm]"

        # OK,May 12, 2010$   or   is...May 12, 2010$    or    OK,May 12, 2010 on 
     |  "[,.][A-Z][a-z][a-z]+ [0-9]+, 20[0-9][0-9]"

        # 2010/05/17 15:06:56
     |  "[0-9][0-9][0-9][0-9]/[0-9][0-9]/[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9]"

        # TODO:
        # 2010-04-23 16:25:15 UTC
     ;


     "${FILEDATE}" ::= "[0-9][0-9]* [A-Z][a-z][a-z] [0-9][0-9] [0-9][0-9]:[0-9][0-9]" ;
                     # -rw-r--r--  1 root root 56 Jan 27 00:23 /etc/localtime
     "${TIMESTAMP} ${FILESIZE} " ::= "^TIMESTAMP^\\s+[0-9.]+[KkMm] " ;

     " ${DURATION}" ::=
         # 1 minute 3 seconds 47 milliseconds  etc.
         " [0-9][0-9]* minute[(s)]* [0-9][0-9]* second[(s)]* [0-9][0-9]* millisecond[(s)]*"

         # 441.78 minutes 0 seconds  or  2minutes3seconds  or  2 minutes, 1 second
      |  " [0-9][.0-9]* *minutes?,? [0-9][.0-9]* *seconds?"

         #  34m 4.5s
      |  " [0-9][.0-9]*m [0-9][.0-9]*s"

         #  1h 13m
      |  " [0-9][.0-9]*h [0-9][.0-9]*m"

         # 0.1234 milli seconds    or    1 millisecond   or  226.5 miliseconds
      |  " [0-9][.0-9]* mill?i ?seconds?"

         # 0.1234 seconds
      |  " '?[0-9.][,.0-9]*'? seconds?"

         # 0.1234 sec. or   0.1234 sec  or  1:32.124 sec
      |  " [0-9][:,.0-9]* sec[.]*"

         #  250ms
      |  " [0-9]+ms"

         #  2.3\tmsecs
      |  "\\s[0-9.]+\\s*msecs?"

         # elapsed=81164    or  Time elapsed:19169ms
      |  "elapsed[:=][0-9]+"
      
         # Taken=20000
      |  "[Tt]aken[:=][0-9]+"

         # wait time: 1234
      |  " time: [0-9]+"
      ;
 

      #  J2EEDEVPROD_11.1.1.4.0_GENERIC_100504 or JEWT_MAIN_GENERIC_100428.1600.941 or WLS10_10.3.4_GENERIC_100506.1329419
      "_GENERIC_${LABEL_DATE}" ::= "_GENERIC_[0-9][0-9][0-9][0-9][0-9][0-9][.0-9]*[S]?" ;
      "Label = ${LABEL_DATE}"  ::=  "Label = [0-9][0-9][0-9][0-9][0-9][0-9][.0-9]*[S]?" ;

      "/${LABEL_DATE}/" ::=  "['/_][0-9][0-9][0-9][0-9][0-9][0-9][.][0-9][0-9][0-9][0-9][.]?[S]?['/_]" ;
      "_${LABEL_DATE}"  ::= "[ _][0-9][0-9][0-9][0-9][0-9][0-9][.][0-9][0-9][0-9][0-9][.]?[S]?\\b" ;


       # JAVA - RELATED FILTERING
       "@${HEX_ADDRESS}" ::= "@[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]*" ;
       ".java:${LINE}: " ::= "[.]java:[0-9][0-9]*: " ;
       "sun.reflect.GeneratedMethodAccessor${NUMBER}." ::= "sun.reflect.GeneratedMethodAccessor[0-9]+.";
         "-Xms${NUMBER}" ::= "-X?ms[0-9]+" ;   # May not want to mask this
         "-Xmx${NUMBER}" ::= "-X?mx[0-9]+" ;   # May not want to mask this
          "] [search path: ${SEARCH_PATH}]" ::=  "^SQB_CLOSE^\\s+^SQB_OPEN^search path for .*^SQB_CLOSE^" ;
               "\"Thread-${THREADNUMBER}\"" ::= "\"Thread-[0-9]+\"" ;

       # JDBC-Related functionality

       "jdbc:oracle:thin:@${HOST_NAME}:${PORT_NUMBER}:${DBURL}" ::= "jdbc:oracle:thin:@[^:]+:[^:]+:[^:]+" ;


       # PORT AND URL - RELATED FILTERING

       " Port found: ...=${PORT_NUMBER}"  ::=  " Port found: [^ ]*=[0-9][0-9]*" ;
         "Port is set to ${PORT_NUMBER}"  ::=  "[Pp][Oo][Rr][Tt][A-Za-z._]* is set to [0-9][0-9]+" ;
                "Port is ${PORT_NUMBER}"  ::=  "[Pp][Oo][Rr][Tt][A-Za-z._]* is [0-9][0-9]+" ;

                  # Port.x.y: 123  /  'Port': '123'   /  Port:456  /   PORT ::234  / Port number 678
                  "port: ${PORT_NUMBER}"  ::=  "[Pp][Oo][Rr][Tt] ?[A-Za-z._]*[ :']+[0-9][0-9][0-9]*" ;
                  #  also:  adminport = 4567
                   "port=${PORT_NUMBER}"  ::=  "[Pp][Oo][Rr][Tt][A-Za-z._]* ?= ?[0-9][0-9][0-9]*"  ;

           "${HOST_NAME}:${PORT_NUMBER}"  ::=  "^HOSTNAME^^BSLASH^?[ :]+[0-9]+" ;
           "${HOST_NAME}:${PORT_NUMBER}"  ::=  "^HOSTNAME^%3A[0-9]+" ;
     "${HOST_NAME}/LINUX:${PORT_NUMBER}"  ::=  "^HOSTNAME^/LINUX:[0-9]+" ;
              "localhost:${PORT_NUMBER}"  ::=  "localhost: ?[0-9]+"  ;
                   ".com:${PORT_NUMBER}/" ::=  "[.]com:[0-9][0-9]+/" ;
                "Address=${PORT_NUMBER}"  ::=  "[Aa][Dd]+[Rr][Ee][Ss]+[=:] ?[0-9][0-9]+" ; # address: 1234   or   Address=5678
                 "secure=${PORT_NUMBER}"  ::=  "[Ss][Ee][Cc][Uu][Rr][Ee]=[0-9][0-9]+";
              "bootstrap=${PORT_NUMBER}"  ::=  "[Bb][Oo]+[Tt][Ss][Tt][Rr][Aa][Pp]=[0-9][0-9]+";
                   "host=${PORT_NUMBER}"  ::=  "[Hh][Oo][Ss][Tt]=[0-9][0-9]+" ;
                  "admin:${PORT_NUMBER}"  ::=  "[Aa][Dd][Mm][Ii][Nn]:[0-9][0-9]+" ;
                 "server:${PORT_NUMBER}"  ::=  "[Ss][Ee][Rr][Vv][Ee][Rr]:[0-9][0-9]+" ;
                  ".http=${PORT_NUMBER}"  ::=  "[.]http=[0-9]+" ;
                   ".rmi=${PORT_NUMBER}"  ::=  "[.]rmi=[0-9]+" ;
                    "jmx=${PORT_NUMBER}"  ::=  "jmx=[0-9]+" ;

                         "${NUMERIC_URL}" ::= "[0-9][0-9]*[.][0-9][0-9]*[.][0-9][0-9]*[.][0-9][:0-9]*" ;


# OTHER BUILD_RELATED FILTERING

       # from ENTSEC build
       "INFO: Defensive open of project ... during creation of ..." ::=  "INFO: Defensive open of project [-_A-Za-z0-9.]* during creation of .*" ;
       "Warning(${LINE},${COLUMN}):" ::= "Warning[(][0-9][0-9]*,[0-9][0-9]*[)]:";
       "#${NUMBER} of ${NUMBER}"  ::= "#[0-9][0-9]* of [0-9?][0-9?]*" ;

       #  # from J2EE build
       #  " [java] Integrating jar ${INTEGRATING_JAR}" ::=  " " + SQB_OPEN + "java" + SQB_CLOSE + " Integrating jar [-<>]+[(][0-9/]*[)]";


       # PROCESS-NUMBER RELATED FILTERING

       "process id is ${PROCESS_NUMBER}"  ::=  "process id is [0-9]+";
    "[testlogic] + ${PROCESS_NUMBER} ..." ::=  "^SQB_OPEN^testlogic^SQB_CLOSE^\\s+[+]\\s+[0-9]+\\s+.*" ;
         "[exec] + ${PROCESS_NUMBER} ..." ::=  "^SQB_OPEN^exec^SQB_CLOSE^\\s+[+]\\s+[0-9]+\\s+.*" ;
                "kill ${PROCESS_NUMBER}"  ::=  "kill [0-9][0-9 ]*" ;
    "kill -s -SIGKILL ${PROCESS_NUMBER}"  ::=  "kill -s SIGKILL [0-9][0-9 ]*";
                "(pid ${PROCESS_NUMBER})" ::=  "[(]pid [0-9]+[)]";
                 "pid=${PROCESS_NUMBER}"  ::=  "[Pp][Ii][Dd][Ss]?=[0-9][0-9]*";  # Pids=1243
        "System Load Average: ${NUMBER}"  ::=  "System Load Average: [0-9.]+" ; 


       # WEB-SERVICES and HTML-RELATED FILTERING

       "------=_Part_${PART_DESIGNATION}" ::= "------=_Part_[0-9]+_[0-9]+[.][0-9]+" ;
       "Content-ID: <${CONTENT_ID}>"      ::=  "Content-ID:\\s*<[0-9a-f]+>" ;
         "Content-Length: ${NUMBER}"      ::=  "Content-Length:\\s+[0-9]+" ;
                  "\"cid:${CONTENT_ID}\"" ::=  "\"cid:[0-9a-f]+\""  ;
                           "=IOR:${IOR}"  ::= "=IOR:[0-9a-f]+" ;
               "<!CDATA${CDATA_CONTENT}>" ::= "<!^SQB_OPEN^CDATA^SQB_OPEN^.*^SQB_CLOSE^^SQB_CLOSE^>" ;
             "X-ORACLE-DMS-ECID ${ECID}" ::= "X-ORACLE-DMS-ECID[:= ]+.*" ;
             "ECID-Context=${CONTEXT_ID}" ::= "ECID-Context=.*" ;
                 "Context: ${CONTEXT_ID}" ::= "Context: .*" ;
            "(ExecutionContext: ${ECID})" ::= "[(]ExecutionContext .*: .*[)]" ;
                           "ECID=${ECID}" ::= "ECID=.*" ;
             "HTTPResponse = ${RESPONSE}" ::= "HTTPResponse = .*" ;


         "result: OK,${SESSIONID} on session ${SESSIONID}"
                                          ::= "result: OK,[0-9]+ on session [0-9]+";
                   "session ${SESSIONID}" ::= "[Ss]ession[ (][0-9]+[)]?" ;  # session 1234    or   Session(1234)
                 "sessionId=${SESSIONID}" ::= "[Ss]ession[Ii][Dd]=[0-9]+" ;
          "getSession() ID= ${SESSIONID}" ::= "getSession[(][)] ID= .*" ;
                "uniqueId=${SELENIUMID}&" ::= "uniqueId=[^&]+&" ;
         "Browser ${SESSIONID}/:top ${SELENIUMID} "
                                          ::= "Browser [0-9]+/:top [^ ]+ " ;
                             "urn:${URN}" ::= "urn:^HEX^+" ;
                            "uuid:${URN}" ::= "uuid:[-0-9A-Fa-f]+" ;
         "compositeDN=\"${COMPOSITEDN}\"" ::= "compositeDN=\"[^\"]*\"" ;
              "proxyDaemon ${PROXY_PORT}" ::= "proxyDaemon [0-9]+" ;
                 "proxy${PROXY_PORT}.log" ::= "proxy[0-9]+[.]log" ;

       # SECURITY-RELATED FILTERING

       "gUID = ${GUID}"  ::=  "gUID = ^HEX2^+" ;
       "guid:${GUID}"    ::=  "[Gg][Uu][Ii][Dd][:=]^HEX2^+"  ;
       "<credentials>${CREDENTIALS}</credentials>"  ::= "<credentials>[^<]*</credentials>" ;
       "ID=\"${ID}\"" ::= "ID=\"[^\"]*\""   ;
 
       "URI=\"${URI}\""  ::= "URI=\"[^\"]*\"" ;
       "<dsig:${SIG}Value>${SIG_VALUE}</dsig:${SIG}Value>" ::=  "<dsig:[A-Za-z0-9]*Value>[^<]*</dsig:[A-Za-z0-9]*Value>"  ;
       "${DIGEST_VALUE}"  ::=  "^HEX2^:^HEX2^:^HEX2^:^HEX2^:^HEX2^[A-F0-9:]+" ;

         #  [runsuite]      [echo] {AES}
         "[runsuite] [echo] {AES}${AES}=" ::= "^SQB_OPEN^echo^SQB_CLOSE^ ^CB_OPEN^AES^CB_CLOSE^.*=" ;

                # 'Password': '{AES}Ymb0eaLKzq6YVNK9bYcc+arHduApT/Tsh/Kfms2Iksw='
        "'Password': '${PASSWORD}'" ::= "'Password': '[^']+'" ;
                    ".key=${KEY},"  ::=  "[.]key=.*=," ;
        "JSESSIONID=${JSESSIONID};" ::= "JSESSIONID=[^;]*;" ;
        "JSESSION ID ****** ${JSESSIONID}" ::= "JSESSION ID [*][*]+.*" ;
        "credential:0x${CREDENTIAL}"  ::=  "credential:0x^HEX2^+" ;


         # JPS Testing
           "[jpstests] Creating the page '${URL}'"  ::=  "^SQB_OPEN^jpstests^SQB_CLOSE^ Creating the page .*" ;
                "[jpstests] Navigating to ${URL}"   ::=  "^SQB_OPEN^jpstests^SQB_CLOSE^ Navigating to .*" ;
             "[jpstests] Opening the URL '${URL}'"  ::=  "^SQB_OPEN^jpstests^SQB_CLOSE^ Opening the URL '.*" ;
                         "[java] GET: cmd=${URL}"   ::=  "^SQB_OPEN^java^SQB_CLOSE^ GET: cmd=.*" ;
            "[java] Browser ${SESSIONID}/:top ${SELENIUMID} posted OK"
                                               ::= "^SQB_OPEN^java^SQB_CLOSE^ Browser ^SESSIONID^/:top ^SELENIUMID^ posted OK,.+" ;
            "[java] Got result: OK,${RESULT} " ::= "^SQB_OPEN^java^SQB_CLOSE^ Got result: OK,[^ ]+ " ;
            "[jpstests] DateFormatLocator ${DATEFORMATLOCATOR}"
                                               ::= "^SQB_OPEN^jpstests^SQB_CLOSE^ DateFormatLocator .+" ;
            "[jpstests] GsTabLocator"     ::= "^SQB_OPEN^jpstests^SQB_CLOSE^ GsTabLocator.+" ;
            "[jpstests] CommunityName"    ::= "^SQB_OPEN^jpstests^SQB_CLOSE^ CommunityName for .+" ;
            "[jpstests] Entering ${PAGE}" ::= "^SQB_OPEN^jpstests^SQB_CLOSE^ Entering [^\\s]+" ;
            "[jpstests] Page ${PAGE} "    ::= "^SQB_OPEN^jpstests^SQB_CLOSE^ Page [^\\s]+\\s" ;
            "[jpstests] Waiting for ${PAGE} " ::= "^SQB_OPEN^jpstests^SQB_CLOSE^ Waiting for [^\\s]+ page" ;
                     " for page ${PAGE}"  ::=  " for page [^ ]+" ;
                     " the page ${PAGE}"  ::=  " the page [^ ]+" ;
                      " thepage ${PAGE}"  ::=  " thepage [^ ]+" ;
            " the following url: ${URL}"  ::=  " the following url: [^ ]+" ;
                          " URL: ${URL}"  ::=  " URL: [^ ]+" ;
             " Group Space ${GROUPSPACE}" ::= " Group Space [^ ]+" ;
                         "id=\"${ID}\""   ::= "id=\"[^\"]*\"" ;


       # TESTING-FRAMEWORK - RELATED FILTERING

       "/ReportingSession/R${REPORTING_SESSION}" ::= "/ReportingSession/R[0-9][0-9]*"  ;
       "RunId=\"${RUNID}\""                      ::= "[Rr][Uu][Nn][Ii][Dd]=\"[^\"]*\"" ;
       "RUN_ID_SHORT=${RUNID}"                   ::= "RUN_ID_SHORT=.+" ;

                          "[${NUMBER}]"     ::=  "^SQB_OPEN^[0-9][0-9,]*^SQB_CLOSE^" ;
                          ":${NUMBER} "     ::=  ":[0-9][0-9] " ;
                          ":${NUMBER}"      ::=  ":[0-9][0-9]$"  ;
                         "] ${NUMBER} INFO" ::=  "^SQB_CLOSE^*[0-9][0-9]*  *INFO"  ;
                         "] ${NUMBER} WARN" ::=  "^SQB_CLOSE^  *[0-9][0-9]*  *WARN" ;
                         "] ${NUMBER} ["    ::=  "^SQB_CLOSE^  *[0-9][0-9]*  *^SQB_OPEN^" ;
       " [testlogic] [exec] ${NUMBER}"      ::=  "\\s+^SQB_OPEN^testlogic^SQB_CLOSE^\\s+^SQB_OPEN^exec^SQB_CLOSE^\\s+[0-9]+\\s*$" ;
       " [testlogic] Printing all ..."      ::=  "\\s+^SQB_OPEN^testlogic^SQB_CLOSE^ Printing all the .*" ;
                        "ID=${NUMBER}"      ::=  "ID=[0-9]+"  ;
       "Number of lines in ${LOGFILE}: ${NUMBER}" ::= "Number of lines in [^ :]+[ :]*[0-9]+" ;
        "cksum is: ${CHECKSUM}" ::= "cksum is[ :]+^HEX^+" ;



       # # ADMINSERVER-TESTING RELATED FILTERING
       # "<font color=${COLOR}>"  ::=  "<font color=['\"]?^HEX^^HEX^^HEX^+['\"]?>" ;


       # ATZ-related testng
           "${ATZSRG_USER}" ::= "ATZSRG_^USERNAME^_[0-9]+_[0-9]+" ; 
           "${ATZSRG_USER}" ::= "ATZSRG_[A-Z0-9]+_[0-9]+_[0-9]+" ; 

       # Farm-usage related
           "${FARM_JOBID}"  ::= "^FARMJOBID^_^TRANSACTIONNAME^" ;

       # WC-testing related:
           # /OrderBookingComposite!1.0*soa_4d861307-457c-442b-8b64-68d99901d829/
           "/OrderBookingComposite!${COMPOSITE_ID}/" ::= "/OrderBookingComposite![^/]+/" ;

       # TEMPFILE - RELATED FILTERING

          "/tmp/${TEMPDIR}" ::= "/tmp/[A-Za-z]+[Dd][Ii][Rr][0-9]+" ;  # Example: /tmp/customProfileDir804168
       "/tmp/_${TEMPFILE}." ::= "/tmp/_[A-Za-z0-9]+" ;
        "/tmp/${TEMPFILE}." ::= "/tmp/.*[^0-9][0-9][0-9][0-9][0-9][0-9][0-9]*[.]" ;

       "Creating temporary directory ${TEMPDIR}" ::= "Creating temporary directory .*[.][0-9]+" ;

       # put last, since it matches in many cases.
           "${LONG_NUMBER}" ::= "[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]*" ;

END_MAP_PATTERNS


###                                                            ###
### Rules for mapping HTML URLs to a set of log file locations ###
###                                                            ###
#
# Mainly because MATS tests map to multiple log files.
# When the .html file contains lines such as: 
#   Results at: /net/stansx04/farm_txn_results/SOA_MAIN_GENERIC_T4102629/3997970.MATS_JRF
#   Results at: /net/stansx04/farm_txn_results/J2EE_MAIN_GENERIC_T4108012/lrgmigration_srg
# Then  ${FARM_JOBID} and possibly ${JOB_REQ_ID} may be populated and can be used.

BEGIN_MAP_HTML_TO_LOG

    # .../MATS_JRF_FULL.html ==> .../MATS_JRF/workdir.jar::ASKERNEL_SRG/localTaskProcess.log
    "(.*)/(MATS_JRF_FULL).html$" ==> "\\1/\\2/workdir.jar::/${JOB_REQ_ID}.\\2.farm.out"
                                   + "\\1/\\2/workdir.jar::ASKERNEL_SRG/localTaskProcess.log" 
                                   -- + "\\1/\\2/workdir.jar::FMW_SOA_INST1/localTaskProcess.log"
                                   -- + "\\1/\\2/workdir.jar::RCU_CLIENT/localTaskProcess.log" 
                                   ;

    # .../MATS_JRF.html ==> .../MATS_JRF/workdir.jar::ASKERNEL_SRG_PS1/localTaskProcess.log
    "(.*)/(MATS_JRF).html$" ==> "\\1/\\2/workdir.jar::/${JOB_REQ_ID}.\\2.farm.out"
                              + "\\1/\\2/workdir.jar::ASKERNEL_SRG_PS1/localTaskProcess.log" ; 

    # .../MATS_SOA_FULL_DB112.html ==> .../MATS_SOA_FULL_DB112/workdir.jar::/soa_wls_mats.log
    "(.*)/(MATS_SOA_FULL_DB112).html$"  ==> "\\1/\\2/workdir.jar::/${JOB_REQ_ID}.\\2.farm.out"
                                          + "\\1/\\2/workdir.jar::/soa_wls_mats.log" 
                                          -- + "\\1/\\2/workdir.jar::Ant1/localTaskProcess.log"
                                          -- + "\\1/\\2/workdir.jar::FMW_SOA_INST/localTaskProcess.log"
                                          -- + "\\1/\\2/workdir.jar::RCU_CLIENT/localTaskProcess.log"
                                          -- + "\\1/\\2/workdir.jar::SOA_MATS/localTaskProcess.log" 
                                          ;
    # .../MATS_SOA_WAS_DB112.html ==> .../MATS_SOA_WAS_DB112/workdir.jar::/soa_wls_mats.log
    "(.*)/(MATS_SOA_WAS_DB112).html$"  ==> "\\1/\\2/workdir.jar::/${JOB_REQ_ID}.\\2.farm.out"
                                         + "\\1/\\2/workdir.jar::SOA_MATS/localTaskProcess.log" 
                                         -- + "\\1/\\2/workdir.jar::/soa_wls_mats.log" 
                                         -- + "\\1/\\2/workdir.jar::Ant1/localTaskProcess.log"
                                         -- + "\\1/\\2/workdir.jar::FMW_SOA_INST/localTaskProcess.log"
                                         -- + "\\1/\\2/workdir.jar::RCU_CLIENT/localTaskProcess.log"
                                         ;

    # .../MATS_SOABAM_DB112.html ==> .../MATS_SOABAM_DB112/workdir.jar::/soa_wls_mats.log
    "(.*)/(MATS_SOABAM_DB112).html$"  ==> "\\1/\\2/workdir.jar::/${JOB_REQ_ID}.\\2.farm.out"
                                        + "\\1/\\2/workdir.jar::/soa_wls_mats.log"  ;

    # .../MATS_WC_JW_FULL.html ==> .../MATS_WC_JW_FULL/workdir.jar::/webcenter_ant.log
     "(.*)/(MATS_WC_JW_FULL).html$" ==> "\\1/\\2/workdir.jar::/${JOB_REQ_ID}.\\2.farm.out"
                                      + "\\1/\\2/workdir.jar::/webcenter_ant.log" 
                                      -- + "\\1/\\2/workdir.jar::FMW_WC_INST/localTaskProcess.log"
                                      -- + "\\1/\\2/workdir.jar::Rcu_client1/localTaskProcess.log"
                                      ;

    # .../MATS_WC_DB112.html ==> .../MATS_WC_DB112/workdir.jar::/webcenter_ant.log
     "(.*)/(MATS_WC_DB112).html$" ==> "\\1/\\2/workdir.jar::/${JOB_REQ_ID}.\\2.farm.out"
                                    + "\\1/\\2/workdir.jar::/webcenter_ant.log" ;

    # .../MATS_BPM_FULL_DB112.html ==> .../MATS_BPM_FULL_DB112/workdir.jar::/soa_wls_mats.log
     "(.*)/(MATS_BPM_FULL_DB112).html$" ==> "\\1/\\2/workdir.jar::/${JOB_REQ_ID}.\\2.farm.out"
                                          + "\\1/\\2/workdir.jar::/soa_wls_mats.log" 
                                          + "\\1/\\2/workdir.jar::FMW_SOA_INST/localTaskProcess.log"
                                          + "\\1/\\2/workdir.jar::Rcu_client1/localTaskProcess.log"
                                          ;


    # Generic rule. This one comes last since rules are tried in-order.
    # Example: .../askernel_srg.html ==> .../askernel_srg/workdir.jar::/lrgaskernel_srg.farm.out
    "(.*)/([^/]+)[.]html$"  ==> "\\1/\\2/workdir.jar::/lrg\\2.farm.out" ;

END_MAP_HTML_TO_LOG
